#!/usr/bin/env python
# -*- coding: utf-8 -*-
#################################################################################
# geo-kaepora
# -----------------------
# Prints a random abstract geometrical shape as ascii art!
# Makes a pretty!
# Tells a story written by an AI!
#
# @author Isis Agora Lovecruft, 0x2cdb8b35
# @version 0.0.1
# @date 28 June 2012
#________________________________________________________________________________
# Changelog:
# ----------
# v0.0.1: For kaepora! <(A)3
#         Thanks for being awesome and implementing mpOTR!
#################################################################################

from os import path
from random import choice
from simplejson import loads
from urllib2 import urlopen
from urlparse import urlparse, urlunparse

import socket


class InvalidURL(Exception):
    pass

class SafemnAPI():
    def __init__(self):
        self.URL_SHORTEN = "http://safe.mn/api/?url=%s&format=json"

    def shorten(self, url):
        try:
            url = urlunparse(urlparse(url))
            response = urlopen(self.URL_SHORTEN % url)
            json = response.read()
            json_decode = loads(json)
            url = json_decode.get('url', None)
            if url is None:
                raise InvalidURL
            return url
        except Exception, e:
            raise e

class ForKaepora():

    def __init__(self):
        pass

    @staticmethod
    def print_a_shape(self):
        shapes = []
        shapes.append("""
                                    ,_-=(!7(7/zs_.
                                 .='  ' .`/,/!(=)Zm.
                   .._,,._..  ,-`- `,\ ` -` -`\\7//WW.
              ,v=~/.-,-\- -!|V-s.)iT-|s|\-.'   `///mK%.
            v!`i!-.e]-g`bT/i(/[=.Z/m)K(YNYi..   /-]i44M.
          v`/,`|v]-DvLcfZ/eV/iDLN\D/ZK@%8W[Z..   `/d!Z8m
         //,c\(2(X/NYNY8]ZZ/bZd\()/\7WY%WKKW)   -'|(][%4.
       ,\\i\c(e)WX@WKKZKDKWMZ8(b5/ZK8]Z7%ffVM,   -.Y!bNMi
       /-iit5N)KWG%%8%%%%W8%ZWM(8YZvD)XN(@.  [   \]!/GXW[
      / ))G8\NMN%W%%%%%%%%%%8KK@WZKYK*ZG5KMi,-   vi[NZGM[
     i\!(44Y8K%8%%%**~YZYZ@%%%%%4KWZ/PKN)ZDZ7   c=//WZK%!
    ,\y\YtMZW8W%%f`,`.t/bNZZK%%W%%ZXb*K(K5DZ   -c\\/KM48
    -|c5PbM4DDW%f  v./c\[tMY8W%PMW%D@KW)Gbf   -/(=ZZKM8[
    2(N8YXWK85@K   -'c|K4/KKK%@  V%@@WD8e~  .//ct)8ZK%8`
    =)b%]Nd)@KM[  !'\cG!iWYK%%|   !M@KZf    -c\))ZDKW%`
    YYKWZGNM4/Pb  '-VscP4]b@W%     'Mf`   -L\///KM(%W!
    !KKW4ZK/W7)Z. '/cttbY)DKW%     -`  .',\y)K(5KW%%f
    'W)KWKZZg)Z2/,!/L(-DYYb54%  ,,`, -\-/y(((KK5WW%f
     \M4NDDKZZ(e!/\7vNTtZd)8\Mi!\-,-/i-v((tKNGN%W%%
     'M8M88(Zd))///((|D\tDY\\KK-`/-i(=)KtNNN@W%%%@%[
      !8%@KW5KKN4///s(\Pd!ROBY8/=2(/4ZdzKD%K%%%M8@%%
       '%%%W%dGNtPK(c\/2\[Z(ttNYZ2NZW8W8K%%%%YKM%M%%.
         *%%W%GW5@/%!e]_tZdY()v)ZXMZW%W%%%*5Y]K%ZK%8[
          '*%%%%8%8WK\)[/ZmZ/Zi]!/M%%%%@f\ \Y/NNMK%%!
            'VM%%%%W%WN5Z/Gt5/b)((cV@f`  - |cZbMKW%%|
               'V*M%%%WZ/ZG\+5((+)L'-,,/  -)X(NWW%%%
                    `~`MZ/DZGNZG5(((\,    ,t\\Z)KW%@
                       'M8K%8GN8\5(5///]i!v\K)85W%%f
                         YWWKKKKWZ8G54X/GGMeK@WM8%@
                          !M8%8%48WG@KWYbW%WWW%%%@
                            VM%WKWK%8K%%8WWWW%%%@`
                              ~*%%%%%%W%%%%%%%@~
                                 ~*MM%%%%%%@f`
                                     '''''

    """)
        shapes.append("""
                     _______
                    / _____ \
              _____/ /     \ \_____
             / _____/  311  \_____ \
       _____/ /     \       /     \ \_____
      / _____/  221  \_____/  412  \_____ \
     / /     \       /     \       /     \ \
    / /  131  \_____/  322  \_____/  513  \ \
    \ \       /     \       /     \       / /
     \ \_____/  232  \_____/  423  \_____/ /
     / /     \       /     \       /     \ \
    / /  142  \_____/  333  \_____/  524  \ \
    \ \       /     \       /     \       / /
     \ \_____/  243  \_____/  434  \_____/ /
     / /     \       /     \       /     \ \
    / /  153  \_____/  344  \_____/  535  \ \
    \ \       /     \       /     \       / /
     \ \_____/  254  \_____/  445  \_____/ /
      \_____ \       /     \       / _____/
            \ \_____/  355  \_____/ /
             \_____ \       / _____/
                   \ \_____/ /
                    \_______/

    """)
        shapes.append("""
    +------+.      +------+       +------+       +------+      .+------+
    |`.    | `.    |\     |\      |      |      /|     /|    .' |    .'|
    |  `+--+---+   | +----+-+     +------+     +-+----+ |   +---+--+'  |
    |   |  |   |   | |    | |     |      |     | |    | |   |   |  |   |
    +---+--+.  |   +-+----+ |     +------+     | +----+-+   |  .+--+---+
     `. |    `.|    \|     \|     |      |     |/     |/    |.'    | .'
       `+------+     +------+     +------+     +------+     +------+'

       .+------+     +------+     +------+     +------+     +------+.
     .' |    .'|    /|     /|     |      |     |\     |\    |`.    | `.
    +---+--+'  |   +-+----+ |     +------+     | +----+-+   |  `+--+---+
    |   |  |   |   | |    | |     |      |     | |    | |   |   |  |   |
    |  ,+--+---+   | +----+-+     +------+     +-+----+ |   +---+--+   |
    |.'    | .'    |/     |/      |      |      \|     \|    `. |   `. |
    +------+'      +------+       +------+       +------+      `+------+

       .+------+     +------+     +------+     +------+     +------+.
     .' |      |    /|      |     |      |     |      |\    |      | `.
    +   |      |   + |      |     +      +     |      | +   |      |   +
    |   |      |   | |      |     |      |     |      | |   |      |   |
    |  .+------+   | +------+     +------+     +------+ |   +------+.  |
    |.'      .'    |/      /      |      |      \      \|    `.      `.|
    +------+'      +------+       +------+       +------+      `+------+
    """)
        shapes.append("""
      _______________________________
     /\                              \ 
    /++\    __________________________\ 
    \+++\   \ ************************/
     \+++\   \___________________ ***/
      \+++\   \             /+++/***/
       \+++\   \           /+++/***/
        \+++\   \         /+++/***/
         \+++\   \       /+++/***/
          \+++\   \     /+++/***/
           \+++\   \   /+++/***/
            \+++\   \ /+++/***/
             \+++\   /+++/***/
              \+++\ /+++/***/
               \+++++++/***/
                \+++++/***/
                 \+++/***/
                  \+/___/

    """)
        shapes.append("""
              +_____A_____+
             /:`          :\ 
           D/ : `         : B
           /  :  `        :  \ 
          /   :   +-----A-----+
         +______A_|__,    :   :
         :`   *___|_A_\___+   :
         : `  `   C  : B   \  :
         :  `  `  |  :  \   B :
         :   +--`-|--A---+   \:
         :   |   `+____A______+
         *__ |__A____+   :   ,
         `   |        \  :  ,
          `  C         B : ,
           ` |          \:,
            `+_____A_____+


          Tessaract like wut!

    """)
        shapes.append("""
                               .--. 
                               \  / 
                            .--.\/.--.  
                       .--.|    \\    |.--. 
                       \  / '--'/\'--' \  / 
                    .--.\/.--. /  \ .--.\/.--. 
               .--.|    \\    |:--:|    \\    |.--. 
               \  / '--'/\'--' \  / '--'/\'--' \  / 
            .--.\/.--. /  \ .--.\/.--. /  \ .--.\/.--.  
           |    \\    |:--:|    \\    |:--:|    \\    | 
            '--'/\'--' \  / '--'/\'--' \  / '--'/\'--'
               /  \ .--.\/.--. /  \ .--.\/.--. /  \ 
               '--'|    \\    |:--:|    \\    |'--' 
                    '--'/\'--' \  / '--'/\'--' 
                       /  \ .--.\/.--. /  \ 
                       '--'|    \\    |'--' 
                            '--'/\'--' 
                               /  \ 
                               '--' 
    """)
        shapes.append("""
                 _____
              .-'     '-.
            .'           '.
           /               \
          ;                 ;
          |                 |
          ;                 ;
           \               /
            '.           .'
              '-._____.-'
                .-'""'-.
              .'        '.
             /            \  
            ;              ;
            ;              ;
             \            /
              '.        .'
                '-....-'
                  .-""-.
                 /      \  
                ;        ;
                 \      /
                  '-..-'
                    .--.
                   /    \ 
                   \    /
                    '--'
                      .-.
                     (   )
                      '-'
    """)
        shapes.append("""
                       .-'''-.
               .-'''-./       \.-'''-.
       .-'''-./       \.-'''-./       \.-'''-.
      /       \.-'''-./'-...-'\.-'''-./       \
      \       /'-...-'\.-'''-./'-...-'\       /
       '-...-'\       /'-...-'\       /'-...-'
               '-...-'\       /'-...-'
                       '-...-'
    """)
        shapes.append("""
                __    __ 
             __/  \__/  \__ 
            /  \__/  \__/  \__ 
            \__/  \__/  \__/  \__
               \__/  \__/  \__/  \__
             __/  \__/  \__/  \__/  \
            /  \__/  \__/  \__/  \__/ 
            \__/  \__/  \__/  \__/  \
               \__/  \__/  \__/  \__/ 
             __/  \__/  \__/  \__/  \
            /  \__/  \__/  \__/  \__/ 
            \__/  \__/  \__/  \__/  \
               \__/  \__/  \__/  \__/ 
             __/  \__/  \__/  \__/ 
            /  \__/  \__/  \__/ 
            \__/  \__/  \__/ 
               \__/  \__/ 
    """)
        shapes.append("""
                              _
                             /\\ 
                            /  \\ 
                           / /\ \\ 
                          / // \ \\ 
                          \ \\ / // 
                        _  \ \/ //  _ 
                       /\\  \ \//  /\\ 
                      /  \\ /\ \\ /  \\ 
                     / /\ \/ /\ \/ /\ \\ 
                    / // \/ // \/ // \ \\ 
                    \ \\ / /\\ / /\\ / // 
                  _  \ \/ /\ \/ /\ \/ //  _
                 /\\  \ \// \ \// \ \//  /\\  
                /  \\ /\ \\ /\ \\ /\ \\ /  \\ 
               / /\ \/ /\ \/ /\ \/ /\ \/ /\ \\ 
              / // \/ // \/ // \/ // \/ // \ \\ 
              \ \\ / /\\ / /\\ / /\\ / /\\ / //
            _  \ \/ /\ \/ /\ \/ /\ \/ /\ \/ //  _
           /\\  \ \// \ \// \ \// \ \// \ \//  /\\ 
          /  \\ /\ \\ /\ \\ /\ \\ /\ \\ /\ \\ /  \\ 
         / /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \\ 
        / // \/ // \/ // \/ // \/ // \/ // \/ // \ \\ 
        \ \\ / /\\ / /\\ / /\\ / /\\ / /\\ / /\\ / //
         \ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ //
          \  // \ \// \ \// \ \// \ \// \ \// \  //
           \//  /\ \\ /\ \\ /\ \\ /\ \\ /\ \\  \//
               / /\ \/ /\ \/ /\ \/ /\ \/ /\ \\ 
              / // \/ // \/ // \/ // \/ // \ \\ 
              \ \\ / /\\ / /\\ / /\\ / /\\ / // 
               \ \/ /\ \/ /\ \/ /\ \/ /\ \/ // 
                \  // \ \// \ \// \ \// \  // 
                 \//  /\ \\ /\ \\ /\ \\  \// 
                     / /\ \/ /\ \/ /\ \\ 
                    / // \/ // \/ // \ \\ 
                    \ \\ / /\\ / /\\ / // 
                     \ \/ /\ \/ /\ \/ // 
                      \  // \ \// \  // 
                       \//  /\ \\  \// 
                           / /\ \\ 
                          / // \ \\ 
                          \ \\ / // 
                           \ \/ // 
                            \  // 
                             \// 
    """)
        #ascii_art = choice(shapes)
        #ascii_art_fixed = r'%s' % ascii_art
        #print ascii_art_fixed

        return shapes

    @staticmethod
    def make_a_pretty():
        pretty = ['http://www.brianpiana.com/wp-content/uploads/2011/08/landscape1.png',
                  'https://s3.amazonaws.com/data.tumblr.com/tumblr_m46s1kMGx31qzt4vjo1_r1_500.gif',
                  'https://s3.amazonaws.com/data.tumblr.com/tumblr_m436mzp63k1qzt4vjo1_r7_500.gif',
                  'https://s3.amazonaws.com/data.tumblr.com/tumblr_m39qj6mK6v1qzt4vjo1_500.gif',
                  'https://s3.amazonaws.com/data.tumblr.com/tumblr_m2qw2jzPkJ1qzt4vjo1_r1_500.gif',
                  'http://davidope.com/tmblr/120305_xxl.gif',
                  'https://s3.amazonaws.com/data.tumblr.com/tumblr_m0ch5i6PWe1qzt4vjo1_500.gif',
                  'https://s3.amazonaws.com/data.tumblr.com/tumblr_lztyt60lS91qzt4vjo1_500.gif',
                  'https://s3.amazonaws.com/data.tumblr.com/tumblr_lz9c7jeS3b1qzt4vjo1_500.gif',
                  'https://s3.amazonaws.com/data.tumblr.com/tumblr_lxkgfkEHxn1qzt4vjo1_500.gif',
                  'http://davidope.com/tmblr/the_same.png',
                  'http://www.wayfarergallery.net/hot-images/wp-content/uploads/2010/08/Grid-Works2000-bw-4.gif',
                  'http://www.wayfarergallery.net/hot-images/wp-content/uploads/2010/08/Grid-Works2000-bw-3.gif',
                  'http://www.wayfarergallery.net/hot-images/wp-content/uploads/2010/08/Grid-Works2000-bw-21.gif',
                  'http://www.wayfarergallery.net/hot-images/wp-content/uploads/2010/08/Grid-Works2000-bw-1.gif',
                  'https://s3.amazonaws.com/data.tumblr.com/tumblr_lvabjmK8Ab1qzt4vjo1_500.gif',
                  'https://s3.amazonaws.com/data.tumblr.com/tumblr_luda3yYxzm1qzt4vjo1_500.gif',
                  'http://dearcomputer.nl/priwrid/',
                  'http://www.alwaysloading.com/',
                  'http://www.master-list2000.com/abillmiller/pages/imagePages/gridworks2000-blogdrawings-collage18.html',
                  'http://www.master-list2000.com/abillmiller/pages/imagePages/gridworks2000-blogdrawings-collage-4.html',
                  'http://www.master-list2000.com/abillmiller/pages/imagePages/gridworks2000-anim09.html',
                  'http://place3.elnafrederick.computersclub.org/',
                  'http://www.todayandtomorrow.net/wp-content/uploads/2009/12/gate_to_night_gate_to_day.gif',
                  'http://www.todayandtomorrow.net/wp-content/uploads/2009/12/revolving_door.gif',
                  'http://www.innerdoubts.com/',
                  'https://s3.amazonaws.com/data.tumblr.com/tumblr_m64wdyXg4a1qzt4vjo1_500.gif',
                  'https://s3.amazonaws.com/data.tumblr.com/tumblr_m618fya1Me1qzt4vjo1_r1_500.gif',
                  'https://s3.amazonaws.com/data.tumblr.com/tumblr_m5sbvyRME11qzt4vjo1_500.gif',
                  'https://s3.amazonaws.com/data.tumblr.com/tumblr_m5ew7vyBE71qzt4vjo1_500.gif',
                  'https://s3.amazonaws.com/data.tumblr.com/tumblr_m51woeJu3w1qzt4vjo1_r4_500.gif',
                  'https://s3.amazonaws.com/data.tumblr.com/tumblr_m4znrlTlEy1qzt4vjo1_r2_500.gif']

        picture = choice(pretty)
        safemn = SafemnAPI()
        short = safemn.shorten(picture)

        msg = "And we thought you'd find this pretty:\n" + short + "\n"
        return msg

    @staticmethod
    def pick_a_story(self):
        dt = socket.getdefaulttimeout=4
        base_url = 'http://dearcomputer.nl/extras/story/readstory.php?id='
        text_urls = []

        for x in range(1, 498):
            story_url = (base_url + str(x))
            text_only = ('http://html2text.theinfo.org/?url=' + story_url) 
            text_urls.append(text_only)

        story = choice(text_urls)

        try:
            story_opened = urlopen(story, timeout=dt)
        except Exception:
            return
        
        if story_opened:
            story_text = urlopen(story).read()

            # Law of Demeter, my ass!
            raw_title = story_text.split('*', 2)[2].split('*', 1)[0]
            raw_story = story_text.split('* * *', 1)[1].strip()
    
            nice = '***  ' + raw_title + '  ***\n'
            nicer = raw_story.replace('\n\n\n', '\n')
            nicer_again = nicer.replace('\n\n', '\n')

            first_line = len(nice)
            line = '*' * first_line

            nicest = line + '\n' + nice + line + '\n' + nicer_again 
            return nicest
        else:
            return " "

    def store_a_story(self):
        separator = "!!!!!!!!!"
        stories = path.join(path.abspath(path.curdir), 
                            '.ai_generated_stories')

        with open(stories, "a+") as seen:
            total = seen.read()
            have = total.split(separator)
            
            count = len(have)

            if count > 150:
                ai_story = choice(have)
            else:
                ai_story = self.pick_a_story()
                store = str(ai_story) + separator
                
                if have.count(str(ai_story)) == 0:
                    seen.write(store)
            
            return ai_story


if __name__ == "__main__":
    for_kaepora = ForKaepora()

    derp = for_kaepora.print_a_shape()
    broken = choice(derp)
    fixed = r'%s' % broken
    print fixed

    for_kaepora.make_a_pretty()

    glitch = "****\n****\n****\n"
    story = glitch

    while story == glitch:
        story = for_kaepora.store_a_story()
    print story
