#!/usr/bin/env python
# -*- coding: utf-8 -*-
##################################################################################
#
# import-contacts-from-thunderbird-csv.py
# ---------------------------------------
# Turns contacts from Thunderbird csv output into abook format for Mutt.
#
# @author Isis Agora Lovecruft, 0x2cdb8b35
# @version 0.0.1
#_________________________________________________________________________________
# Changelog:
# ----------
# v0.0.1: Beep.
##################################################################################

from os import path
from optparse import OptionParser

def parse(csv_file):
    with open(path.abspath(csv_file)) as fh:
        lines = fh.readlines()
        for line in lines:
            if line.startswith("First Name"):
                continue
            fields = line.split(',')
            yield fields

def make_abook(csv_file, outfile):
    if not outfile.endswith(".abook"):
        outfile = str(outfile) + ".abook"
    else:
        outfile = str(outfile)

    with open(outfile, "w") as out:
        out.write("# abook addressbook file generated by import-contacts-from-thunderbird-csv.py\n")
        out.write("\n")
        out.write("[format]\n")
        out.write("program=abook\n")
        out.write("version=0.6.2pre2\n")
        out.write("\n")
        out.write("\n")

        counter = 0
        for field in parse(csv_file):

            if field[2] != "":
                name = field[2]
            else:
                name = field[0] + ' ' + field[1]

            if field[4] != "":
                email = field[4]
            elif field[5] != "":
                email = field[5]
            else:
                email = ""

            if field[11] != "":
                phone = field[11]
            elif field[8] != "":
                phone = field[8]
            elif field[7] != "":
                phone = field[7]
            else:
                phone = ""

            if field[3] != "":
                nick = field[3]
            elif field[6] != "":
                nick = field[6]
            else:
                nick = ""

            notes = ""
            if field[12] != "" or field[13] != "" or field[14] != "" or field[15] != "" or field[16] != "" or field[17] != "":
                notes = notes + " Home Address:" + field[12] + field[13] + field[14] + field[15] + field[16] + field[17]
            if field[18] != "" or field[19] != "" or field[20] != "" or field[21] != "" or field[22] != "" or field[23] != "":
                notes = notes + " Work Address:" + field[18] + field[19] + field[20] + field[21] + field[22] + field[23]
            if field[24] != "":
                notes = notes + " Title:" + field[24]
            if field[25] != "":
                notes = notes + " Department:" + field[25]
            if field[26] != "":
                notes = notes + " Organization:" + field[26]
            if field[27] != "":
                notes = notes + " Website:" + field[27]
            if field[28] != "":
                notes = notes + " Website:" + field[28]
            if field[29] != "" or field[30] != "" or field[31] != "":
                notes = notes + " Birthday:" + field[31] + field[30] + field[29]
            if field[32] != "" or field[33] != "" or field[34] != "" or field[35] != "" or field[36] != "":
                notes = notes + " Other:" + field[32] + field[33] + field[34] + field[35] + field[36]

            out.write("[%s]\n" % counter)
            out.write("name=%s\n" % name)
            out.write("email=%s\n" % email)
            if phone != "":
                out.write("phone=%s\n" % phone)
            if nick != "":
                out.write("nick=%s\n" % nick)
            if notes != "":
                out.write("notes=%s\n" % notes)
            out.write("\n")

            counter += 1
        return

def append_to(csv_file, aliases_file):
    aliases_file = str(aliases_file)

    with open(aliases_file, "w") as out:

        for field in parse(csv_file):

            if field[2] != "":
                name = field[2]
            else:
                name = field[0] + ' ' + field[1]

            if field[4] != "":
                email = field[4]
            elif field[5] != "":
                email = field[5]
            else:
                email = ""

            if field[3] != "":
                key = field[3]
            elif field[6] != "":
                key = field[6]
            elif email != "":
                key = email.split("@")[0]
            else:
                key = name.replace(' ', '')

            out.write("alias %s %s <%s>\n" % (key, name, email))
        return

if __name__ == "__main__":
    parser = OptionParser()
    parser.add_option("-i", "--input", dest="inputfile",
                      help="The .csv file to parse")
    parser.add_option("-o", "--output", dest="outputfile",
                      help="The .abook file to write out to")
    parser.add_option("-a", "--append", dest="aliases_file",
                      help="Append to a Mutt aliases_file instead")
    parser.add_option("-f", action="store_true", dest="force",
                      help="Force a dangerous action to occur")
    (options, args) = parser.parse_args()

    if options.aliases_file:
        if not options.force:
            print "WARNING: THIS WILL OVERWRITE YOUR EXISTING ALIASES_FILE!"
            print "If you're absolutely sure you want to do this, use the -f option."
        else:
            append_to(options.inputfile, options.aliases_file)
    elif not options.inputfile or not options.outputfile:
        parser.print_help()
    elif args:
        parser.print_help()
    else:
        make_abook(options.inputfile, options.outputfile)
